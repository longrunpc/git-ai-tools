#!/bin/bash

# AI 기반 자동 커밋 메시지 생성 스크립트
# 사용법: ./scripts/ai-commit.sh

set -e

# 색상 정의
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 함수: API 키 확인
check_api_key() {
    if [ -z "$OPENAI_API_KEY" ] && [ -z "$ANTHROPIC_API_KEY" ]; then
        echo -e "${RED}❌ API 키가 설정되지 않았습니다.${NC}"
        echo ""
        echo "다음 중 하나를 설정해주세요:"
        echo "1. OpenAI API: export OPENAI_API_KEY='your-key'"
        echo "2. Anthropic API: export ANTHROPIC_API_KEY='your-key'"
        echo ""
        echo "또는 .env 파일에 추가:"
        echo "OPENAI_API_KEY=your-key"
        echo "ANTHROPIC_API_KEY=your-key"
        exit 1
    fi
}

# 함수: OpenAI API 호출
call_openai() {
    local prompt="$1"

    # 시스템 메시지 정의
    local system_msg="당신은 git 커밋 메시지를 생성하는 전문가입니다. Conventional Commits 형식을 따르며, 한국어로 명확하고 간결한 커밋 메시지를 작성합니다. 형식: 'type: 간단한 설명\n\n상세 내용(필요시)' NestJS 프로젝트의 맥락을 이해하고 적절한 메시지를 생성해주세요."

    # JSON 요청 생성
    local json_data=$(jq -n \
        --arg model "gpt-4o-mini" \
        --arg system "$system_msg" \
        --arg user "$prompt" \
        --argjson max_tokens 500 \
        --argjson temperature 0.3 \
        '{
            model: $model,
            messages: [
                {role: "system", content: $system},
                {role: "user", content: $user}
            ],
            max_tokens: $max_tokens,
            temperature: $temperature
        }')

    curl -s https://api.openai.com/v1/chat/completions \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $OPENAI_API_KEY" \
        -d "$json_data" | jq -r '.choices[0].message.content'
}

# 함수: Anthropic API 호출
call_anthropic() {
    local prompt="$1"
    curl -s https://api.anthropic.com/v1/messages \
        -H "Content-Type: application/json" \
        -H "x-api-key: $ANTHROPIC_API_KEY" \
        -H "anthropic-version: 2023-06-01" \
        -d "{
            \"model\": \"claude-3-haiku-20240307\",
            \"max_tokens\": 500,
            \"system\": \"당신은 git 커밋 메시지를 생성하는 전문가입니다. Conventional Commits 형식을 따르며, 한국어로 명확하고 간결한 커밋 메시지를 작성합니다. 형식: 'type: 간단한 설명\\n\\n상세 내용(필요시)' NestJS 프로젝트의 맥락을 이해하고 적절한 메시지를 생성해주세요.\",
            \"messages\": [
                {
                    \"role\": \"user\",
                    \"content\": \"$prompt\"
                }
            ]
        }" | jq -r '.content[0].text'
}

# 명령줄 인수 처리
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "AI 커밋 메시지 생성 도구"
    echo ""
    echo "사용법:"
    echo "  aicommit    # staged된 변경사항을 분석하여 커밋 메시지 생성"
    echo ""
    echo "사전 요구사항:"
    echo "  1. 변경사항을 stage: git add <파일명>"
    echo "  2. API 키 설정: ~/.ai-dev-tools/config.sh"
    echo ""
    echo "예시:"
    echo "  git add ."
    echo "  aicommit"
    exit 0
fi

# 설정 로드
source ~/.ai-dev-tools/config.sh

# API 키 확인
check_api_key

# staged 파일이 있는지 확인
if ! git diff --cached --quiet; then
    echo -e "${BLUE}🤖 AI가 커밋 메시지를 생성하고 있습니다...${NC}"
    echo ""

    # Git diff 정보 수집
    staged_files=$(git diff --cached --name-only)
    git_diff=$(git diff --cached)
    git_stat=$(git diff --cached --stat)

    # 프롬프트 생성
    prompt="다음 git 변경사항을 분석하여 적절한 커밋 메시지를 생성해주세요:

변경된 파일 목록:
$staged_files

변경 통계:
$git_stat

상세 변경 내용 (일부):
$(echo "$git_diff" | head -100)

요구사항:
1. Conventional Commits 형식 사용 (feat:, fix:, chore:, docs:, test: 등)
2. 한국어로 작성
3. 첫 줄은 50자 이내의 간단한 요약
4. 필요시 빈 줄 후 상세 설명 추가
5. NestJS 프로젝트임을 고려하여 컨트롤러, 서비스, 모듈 등의 맥락 반영

커밋 메시지만 반환해주세요 (다른 설명 없이):"

    # AI API 호출
    if [ -n "$OPENAI_API_KEY" ]; then
        echo -e "${BLUE}📡 OpenAI API 호출 중...${NC}"
        commit_message=$(call_openai "$prompt")
    elif [ -n "$ANTHROPIC_API_KEY" ]; then
        echo -e "${BLUE}📡 Anthropic API 호출 중...${NC}"
        commit_message=$(call_anthropic "$prompt")
    fi

    # API 응답 확인
    if [ -z "$commit_message" ] || [ "$commit_message" = "null" ]; then
        echo -e "${RED}❌ AI API 호출에 실패했습니다.${NC}"
        echo "수동으로 커밋하거나 다시 시도해주세요."
        exit 1
    fi

    echo -e "${GREEN}✨ AI가 생성한 커밋 메시지:${NC}"
    echo "================================"
    echo "$commit_message"
    echo "================================"
    echo ""

    # 사용자 확인
    read -p "이 메시지로 커밋하시겠습니까? (y/N): " -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        git commit -m "$commit_message"
        echo -e "${GREEN}✅ 커밋이 완료되었습니다!${NC}"
    else
        echo -e "${YELLOW}❌ 커밋이 취소되었습니다.${NC}"
        echo -e "${BLUE}💡 생성된 메시지를 수정해서 사용하려면:${NC}"
        echo "git commit -m \"$commit_message\""
    fi

else
    echo -e "${RED}❌ staged된 변경사항이 없습니다.${NC}"
    echo -e "${BLUE}💡 파일을 stage하려면: git add <파일명>${NC}"
fi
